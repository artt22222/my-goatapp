import joblib
import os
import traceback
from django.conf import settings
from django.shortcuts import render
from .models import Diseases, GoatStatistics
from django.shortcuts import get_object_or_404

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ label encoder
model = joblib.load(os.path.join(settings.BASE_DIR, 'test', 'RF_model.pkl'))
label_encoder = joblib.load(os.path.join(settings.BASE_DIR, 'test', 'label_encoder.pkl')) 

def diagnosis(request):
    if request.method == 'POST':
        try:
            symptoms = request.POST.getlist('symptoms[]')
            print("üì• ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:", symptoms)  

            all_possible_symptoms = [
                                    '‡∏ã‡∏∂‡∏°','‡πÄ‡∏ö‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£','‡πÑ‡∏Ç‡πâ','‡∏ú‡∏≠‡∏°‡∏•‡∏á','‡∏ï‡∏±‡∏ß‡∏™‡∏±‡πà‡∏ô',
                                    '‡∏ï‡∏≤‡∏¢‡πÄ‡∏â‡∏µ‡∏¢‡∏ö‡∏û‡∏•‡∏±‡∏ô','‡∏Ç‡∏ô‡∏£‡πà‡∏ß‡∏á','‡∏Ñ‡∏≠‡∏ï‡∏Å','‡πÄ‡∏î‡∏¥‡∏ô‡∏ß‡∏ô/‡πÄ‡∏î‡∏¥‡∏ô‡∏°‡∏∂‡∏ô','‡∏¢‡∏∑‡∏ô‡∏•‡∏≥‡∏ö‡∏≤‡∏Å/‡πÄ‡∏î‡∏¥‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ',
                                    '‡πÑ‡∏≠','‡∏´‡∏≤‡∏¢‡πÉ‡∏à‡∏•‡∏≥‡∏ö‡∏≤‡∏Å','‡∏°‡∏µ‡∏ô‡πâ‡∏≥‡∏°‡∏π‡∏Å','‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏•‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥','‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î',
                                    '‡∏Ç‡∏µ‡πâ‡∏™‡∏µ‡∏î‡∏≥/‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥','‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏õ‡∏≤‡∏Å‡πÅ‡∏£‡∏á','‡∏ï‡∏∏‡πà‡∏°‡πÉ‡∏™/‡∏ï‡∏∏‡πà‡∏°‡∏´‡∏ô‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á','‡πÅ‡∏ú‡∏•‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á','‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏ï‡∏Å‡∏™‡∏∞‡πÄ‡∏Å‡πá‡∏î',
                                    '‡πÅ‡∏ú‡∏•‡πÉ‡∏ô‡∏õ‡∏≤‡∏Å/‡∏•‡∏¥‡πâ‡∏ô','‡∏ô‡πâ‡∏≥‡∏•‡∏≤‡∏¢‡πÑ‡∏´‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥','‡∏ï‡∏≤‡πÅ‡∏î‡∏á','‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡πÑ‡∏´‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥','‡∏Ç‡∏µ‡πâ‡∏ï‡∏≤‡πÄ‡∏¢‡∏≠‡∏∞/‡∏ï‡∏≤‡πÅ‡∏â‡∏∞',
                                    '‡πÄ‡∏î‡∏¥‡∏ô‡∏Å‡∏∞‡πÄ‡∏ú‡∏•‡∏Å','‡πÄ‡∏ï‡πâ‡∏≤‡∏ô‡∏°‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö','‡∏ï‡πà‡∏≠‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÇ‡∏ï','‡∏ö‡∏ß‡∏°‡πÉ‡∏ï‡πâ‡∏Ñ‡∏≤‡∏á','‡∏Ç‡πâ‡∏≠‡∏ö‡∏ß‡∏°/‡∏Ç‡πâ‡∏≠‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö',
                                    '‡πÅ‡∏ú‡∏•‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏Ç‡∏≤/‡∏Å‡∏µ‡∏ö'
            ]

            if not symptoms:
                return render(request, 'app_goat/error.html', {'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'})

            # ‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå
            symptoms_vector = [1 if symptom in symptoms else 0 for symptom in all_possible_symptoms]
            print("üß† ‡πÄ‡∏ß‡∏Å‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏•:", symptoms_vector)  

            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô
            proba = model.predict_proba([symptoms_vector])[0]   
            class_labels = label_encoder.inverse_transform(range(len(proba)))  

            #  zip + sort
            zipped = sorted(zip(class_labels, proba * 100), key=lambda x: x[1], reverse=True)

            #  ‡πÅ‡∏¢‡∏Å top 3
            top3 = zipped[:3]

            # ‡∏´‡∏≤‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            total_percent = sum([p for _, p in zipped])  

            #  ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≤‡∏Å top3
            top3_sum = sum([p for _, p in top3])
            other_sum = total_percent - top3_sum

            #  ‡∏£‡∏ß‡∏° other_sum ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1
            top1_label, top1_prob = top3[0]
            top3[0] = (top1_label, top1_prob + other_sum)

            # ‚úÖ Prediction with adjusted probability
            prediction_with_proba_raw = top3


            # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡πÇ‡∏£‡∏Ñ ‚Üí ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
            disease_name_map = {
                'meli': '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏°‡∏•‡∏¥‡∏≠‡∏≠‡∏¢‡∏î‡πå',
                'Anth': '‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πå',
                'bp': '‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≠‡∏î‡∏õ‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢',
                'FMD': '‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏õ‡∏∑‡πà‡∏≠‡∏¢',
                'arth': '‡πÇ‡∏£‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö',
                'cae': '‡πÇ‡∏£‡∏Ñ‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≠‡∏á‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö',
                'conj': '‡πÇ‡∏£‡∏Ñ‡∏ï‡∏≤‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö',
                'orf': '‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≤‡∏Å‡πÄ‡∏õ‡∏∑‡πà‡∏≠‡∏¢‡∏û‡∏∏‡∏û‡∏≠‡∏á',
                'para': '‡πÇ‡∏£‡∏Ñ‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô',
                'ppr': '‡πÇ‡∏£‡∏Ñ‡∏û‡∏µ‡∏û‡∏µ‡∏≠‡∏≤‡∏£‡πå',
                'skin': '‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á',
                'tb': '‡πÇ‡∏£‡∏Ñ‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ',
            }

            # path ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            base_path = 'app_goat/disease/'
            image_map = {
                '‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≤‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡πâ‡∏≤‡πÄ‡∏õ‡∏∑‡πà‡∏≠‡∏¢': f'{base_path}f_m.jpg',
                '‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≤‡∏Å‡πÄ‡∏õ‡∏∑‡πà‡∏≠‡∏¢‡∏û‡∏∏‡∏û‡∏≠‡∏á': f'{base_path}m.png',
                '‡πÇ‡∏£‡∏Ñ‡πÅ‡∏≠‡∏ô‡πÅ‡∏ó‡∏£‡∏Å‡∏ã‡πå': f'{base_path}antrax.png',
                '‡πÇ‡∏£‡∏Ñ‡∏Ç‡πâ‡∏≠‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö': f'{base_path}arth.jpg',
                '‡πÇ‡∏£‡∏Ñ‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≠‡∏á‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö': f'{base_path}brain_arth.png',
                '‡πÇ‡∏£‡∏Ñ‡∏õ‡∏≠‡∏î‡∏õ‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ö‡∏Ñ‡∏ó‡∏µ‡πÄ‡∏£‡∏µ‡∏¢': f'{base_path}bac.png',
                '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏°‡∏•‡∏¥‡∏≠‡∏≠‡∏¢‡∏î‡πå': f'{base_path}meli.jpg',
                '‡πÇ‡∏£‡∏Ñ‡∏ß‡∏±‡∏ì‡πÇ‡∏£‡∏Ñ': f'{base_path}tub.png',
                '‡πÇ‡∏£‡∏Ñ‡∏ï‡∏≤‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö': f'{base_path}eye.png',
                '‡πÇ‡∏£‡∏Ñ‡∏ú‡∏¥‡∏ß‡∏´‡∏ô‡∏±‡∏á': f'{base_path}skin.png',
                '‡πÇ‡∏£‡∏Ñ‡∏û‡∏µ‡∏û‡∏µ‡∏≠‡∏≤‡∏£‡πå': f'{base_path}ppr.jpg',
                '‡πÇ‡∏£‡∏Ñ‡∏û‡∏¢‡∏≤‡∏ò‡∏¥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô': f'{base_path}internal.jpg',
            }

            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lookup pk ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ó‡∏¢
            disease_thai_name_to_pk = {
            d.title: d.pk for d in Diseases.objects.all()
}

            # ‚úÖ ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô + ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            prediction_with_proba = [
                (
                disease_thai_name_to_pk.get(disease_name_map.get(disease_code, disease_code), None),  # pk
                disease_name_map.get(disease_code, disease_code),  # title (‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ)
                prob,
                image_map.get(disease_name_map.get(disease_code, disease_code), f'{base_path}default.png')  # ‡∏£‡∏π‡∏õ
                )
                for disease_code, prob in prediction_with_proba_raw
            ]


            return render(request, 'app_goat/result.html', {
                'prediction_with_proba': prediction_with_proba,
                'symptoms': symptoms,
            })

        except Exception as e:
            print("‚ùå Error:", str(e))
            traceback.print_exc()
            return render(request, 'app_goat/error.html', {'error': str(e)})

    return render(request, 'app_goat/form.html')



# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ
def about(request):
    return render(request, 'app_goat/about.html')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
def form(request):
    return render(request, 'app_goat/form.html')

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
def list(request):
    diseases = Diseases.objects.all()  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    context = {'diseases': diseases}
    return render(request, 'app_goat/list.html', context)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ
def detail(request, pk):
    disease = get_object_or_404(Diseases, pk=pk)  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á
    context = {'disease': disease}
    return render(request, 'app_goat/detail.html', context)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
def home(request):
    stats = GoatStatistics.objects.last()  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    return render(request, 'app_goat/home.html', {'stats': stats})

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢
def result(request):
    return render(request, 'app_goat/result.html')
